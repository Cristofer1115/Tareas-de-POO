#Ejemplo de Abastracto
class Animal:
    def __init__(self, nombre):
        self.nombre = nombre

    def hablar(self):
        pass  # Método abstracto, se implementará en las subclases

# Creando una instancia
perro = Animal("Soking")
perro.hablar()  # No hace nada porque el método es abstracto

#Ejemplo de encapsulación
class CuentaBancaria:
    def __init__(self, saldo):
        self.__saldo = saldo  # Atributo privado

    def depositar(self, cantidad):
        self.__saldo += cantidad

    def retirar(self, cantidad):
        if cantidad <= self.__saldo:
            self.__saldo -= cantidad
        else:
            print("Fondos insuficientes")

    def obtener_saldo(self):
        return self.__saldo

cuenta = CuentaBancaria(1000)
cuenta.depositar(500)
print(cuenta.obtener_saldo())

#Ejemplo de herencia
class Perro(Animal):
    def hablar(self):
        print("Guau!")

class Gato(Animal):
    def hablar(self):
        print("Miau!")

perro = Perro("soking")
gato = Gato("Michifu")
perro.hablar()  # Imprime "Guau!"
gato.hablar()  # Imprime "Miau!"

#Ejemplo de polimorfosis
def hacer_hablar(animal):
    animal.hablar()

perro = Perro("soking")
gato = Gato("Michifu")
hacer_hablar(perro)  # Imprime "Guau!"
hacer_hablar(gato)  # Imprime "Miau!"
